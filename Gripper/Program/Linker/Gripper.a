;/****
;	*	@name		GRIPPER
;	*	@file 		Gripper.c
;	*
;	*	@author 	Uladzislau 'vladubase' Dubatouka
;	*				<vladubase@gmail.com>.
;	*	@version	V1.0
;	*	@date 		Created on 2020.09.09.
;	*
;	*	@brief 		This program is controlling the servo on gripper.
;    *
;    *   @note       Chip type               : ATtiny85
;    *               AVR Core Clock frequency: 8,000000 MHz
;    *               Memory model            : Small
;    *               External RAM size       : 0
;    *               Data Stack size         : 128
;*****/
;
;
;/************************************** Includes **************************************/
;
;#include    <tiny85.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x18
;PCODE: $00000007 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000008 VOL: 0
	#endif
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;#include    <delay.h>
;#include    <stdint.h>
;#include    <stdbool.h>
;
;
;/*************************************** Defines **************************************/
;
;#define     SIGNAL      PINB & (1 << DDB1)
;
;
;/*********************************** Global Variables *********************************/
;
;#define     MIN_PWM     65
;#define     MAX_PWM     165
;
;
;/********************************* Function  prototypes *******************************/
;
;void InitSys (void);
;
;
;/**************************************** Main ****************************************/
;
;void main (void) {
; 0000 002E void main (void) {

	.CSEG
;PCODE: $0000000B VOL: 0
; 0000 002F     InitSys ();
;PCODE: $0000000C VOL: 0
; 0000 0030 
; 0000 0031     while (true) {
;PCODE: $0000000D VOL: 0
; 0000 0032         // Read data on SIGNAL port
; 0000 0033         if (SIGNAL) {
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0034             // Close gripper
; 0000 0035             if (OCR0A > MAX_PWM) {
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0036             	OCR0A = MAX_PWM;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0037             } else {
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0038             	OCR0A++;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0039             	delay_ms (2);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 003A            	}
;PCODE: $0000001F VOL: 0
; 0000 003B         } else {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 003C             // Open gripper
; 0000 003D             OCR0A = MIN_PWM;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 003E         }
;PCODE: $00000024 VOL: 0
; 0000 003F 
; 0000 0040         // Delay to minimize the influence of noise.
; 0000 0041         delay_ms (500);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0042     }
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0043 }
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;
;
;/************************************* Functions **************************************/
;
;void InitSys (void) {
; 0000 0048 void InitSys (void) {
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0049     // Declare your local variables here
; 0000 004A 
; 0000 004B     // System Clock
; 0000 004C     // Crystal Oscillator division factor: 32
; 0000 004D         CLKPR=0x85;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 004E 
; 0000 004F     // Input/Output Ports initialization
; 0000 0050     // Port B initialization
; 0000 0051     // Func5=In Func4=In Func3=In Func2=In Func1=In Func0=Out
; 0000 0052     // State5=T State4=T State3=T State2=T State1=T State0=0
; 0000 0053         PORTB=0x00;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0054         DDRB=0x01;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0055 
; 0000 0056     // Timer/Counter 0 initialization
; 0000 0057     // Clock source: System Clock
; 0000 0058     // Clock value: (System Clock / 256)
; 0000 0059     // Mode: Fast PWM top=0xFF
; 0000 005A     // OC0A output: Non-Inverted PWM
; 0000 005B     // OC0B output: Disconnected
; 0000 005C         TCCR0A=0x83;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 005D         TCCR0B=0x04;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 005E         TCNT0=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 005F         OCR0A=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0060         OCR0B=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0061 }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
